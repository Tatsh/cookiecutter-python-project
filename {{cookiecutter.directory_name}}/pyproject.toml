[tool.poetry]
name = "{{cookiecutter.directory_name}}"
version = "0.0.1"
authors = {{ cookiecutter.authors.list | jsonify }}
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Typing :: Typed"
]
description = "{{cookiecutter.description}}"
documentation = "https://{{cookiecutter.directory_name}}.readthedocs.io/en/latest/"
include = ["man"]
keywords = ["command line"]
license = "MIT"
packages = [{ include = "{{cookiecutter.module_name}}" }]
readme = "README.md"
repository = "https://github.com/Tatsh/{{cookiecutter.directory_name}}"

[tool.poetry.dependencies]
python = ">=3.10,<4"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]
{% if cookiecutter.want_main %}

[tool.poetry.scripts]
{{ cookiecutter.main_cli_name }} = "{{ cookiecutter.module_name }}:main"
{% endif %}

[tool.commitizen]
tag_format = "v$version"
version_files = ["README.md", "man/{{cookiecutter.directory_name}}.1", "package.json"]
version_provider = "poetry"

[tool.isort]
case_sensitive = true
combine_as_imports = true
from_first = true
line_length = 100
order_by_type = true
use_parentheses = true

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
disallow_subclassing_any = true
# mypy_path = "./.stubs"
show_column_numbers = true
show_error_codes = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[tool.ruff]
exclude = [
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  "_build",
  "build",
  "dist",
  "node_modules"
]
line-length = 100

[tool.pytest.ini_options]
mock_use_standalone_module = true

[tool.yapf]
align_closing_bracket_with_visual_indent = true
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_dict_value = true
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
blank_lines_around_top_level_definition = 2
coalesce_brackets = true
column_limit = 100
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = false
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = true
indent_dictionary_value = true
indent_width = 4
join_multiple_lines = true
no_spaces_around_selected_binary_operators = false
space_between_ending_comma_and_closing_bracket = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = true
spaces_before_comment = 2
split_all_comma_separated_values = false
split_arguments_when_comma_terminated = false
split_before_bitwise_operator = true
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = false
split_before_first_argument = false
split_before_logical_operator = true
split_before_named_assigns = true
split_complex_comprehension = false
split_penalty_after_opening_bracket = 30
split_penalty_after_unary_operator = 10000
split_penalty_before_if_expr = 0
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 30
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.yapfignore]
ignore_patterns = ["node_modules/**"]
